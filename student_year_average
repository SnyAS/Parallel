import pandas as pd
import numpy as np
import datetime

#import dataset, splitting on semic

data = pd.read_csv('C:/Users/Inholland/Desktop/assignment2_parallel/student_Subject_grade.csv', sep=';')

#start timer
start_time = datetime.datetime.now()

#assigning columns which hold the subjects for each year
grades_year_1 = data.iloc[:, 0:22].values
grades_year_2 = data.iloc[:, np.r_[0, 23:41]].values
grades_year_3 = data.iloc[:, np.r_[0, 42:48]].values
grades_year_4 = data.iloc[:, np.r_[0, 49:58]].values

#calculate the average of a student per year
def clalculateYearAverage(year):
    #dictionary to hold output
   student_year_gpa={}
    #iterate over all the student's grades in all years
   for x in year:
       #studentNumber/id
       ID = x[0]
       #grade they got for a subject
       grade= x[1:-1]
       #formula for calculating average
       #sum of all grades / total subjects
       average_grade = (int)(sum(grade) / len(grade))
       #assigning the year gpa to the student
       student_year_gpa[ID] = average_grade
        #returning
   return student_year_gpa

#clalculate the average grades for each of the 4 years
year1 = clalculateYearAverage(year=grades_year_1)
year2 = clalculateYearAverage(year=grades_year_2)
year3 = clalculateYearAverage(year=grades_year_3)
year4 = clalculateYearAverage(year=grades_year_4)

#disctionary for outputing studentID and average for 4 years
total_student_average = {}
#for each of the years look at the student number and zips their grades
def common_entries(*dcts):
    #for each of the enteries looks at the intersection/communalities (studentid)
    for i in set(dcts[0]).intersection(*dcts[1:]):
        yield (i,) + tuple(d[i] for d in dcts)

    return total_student_average
    #return sorted(total_student_average.items(), key=lambda x: x[1])
x = list(common_entries(year1, year2, year3, year4))

#calculating student average
for i, a, b, c, d in x:
    avg = np.mean([a, b, c, d])
    total_student_average[i]= avg
import operator
sorted_x = sorted(total_student_average.items(), key=operator.itemgetter(1), reverse=True)

#write to file
with open('grades.txt', 'w') as f:
    f.write(str(sorted_x))


''''
In case of serialization

import cPickle as pickle

with open('file.txt', 'w') as file:
     file.write(pickle.dumps(exDict)) # use `pickle.loads` to do the reverse
'''
#endtime
end_time = datetime.datetime.now()
#print time elapsed
print(end_time - start_time)
